#pragma once
#include "affine_point.h"
#include "elliptic_curve.h"
#include "jacobi_elliptic_curve.h"

struct DualEcCurve {
    JacobiEllipticCurve curve;
    AffinePoint P; // this has to be the base G
    BigInt order_of_p;
    AffinePoint Q;

    std::string to_string() const
    {
        return "DualEcCurve( curve: " + curve.to_string()
            + " P: " + P.to_string()
            + " Q: " + Q.to_string() + ")";
    }
};

static const DualEcCurve Dual_EC_P256 {
    .curve = JacobiEllipticCurve(
        BigInt("115792089210356248762697446949407573530086143415290314195533631308867097853951"),
        BigInt("41058363725152142129326129780047268409114441015993725554835256314039467401291")), // b
    .P = AffinePoint(                                                                             // Base point for P-256 and also P
        BigInt("48439561293906451759052585252797914202762949526041747995844080717082404635286"),
        BigInt("36134250956749795798585127919587881956611106672985015071877198253568414405109")),
    .order_of_p = BigInt("115792089210356248762697446949407573529996955224135760342422259061068512044369"),
    .Q = AffinePoint(
        BigInt("91120319633256209954638481795610364441930342474826146651283703640232629993874"),
        BigInt("80764272623998874743522585409326200078679332703816718187804498579075161456710"))
};
static const DualEcCurve Dual_EC_P384 {
    .curve = JacobiEllipticCurve(
        BigInt("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319"),
        BigInt("27580193559959705877849011840389048093056905856361568521428707301988689241309860865136260764883745107765439761230575")), // b
    .P = AffinePoint(
        BigInt("26247035095799689268623156744566981891852923491109213387815615900925518854738050089022388053975719786650872476732087"),
        BigInt("8325710961489029985546751289520108179287853048861315594709205902480503199884419224438643760392947333078086511627871")),
    .order_of_p = BigInt("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643"),
    .Q = AffinePoint(
        BigInt("21924447946369108634681939818031968262144539646886075638513519060543201496384909691421082012718961924713843108434021"),
        BigInt("343353117155268907113903713612594467257371882378412227327831217241092025808152604551590470438702352839201257948125"))
};
static const DualEcCurve Dual_EC_P521 {
    .curve = JacobiEllipticCurve(
        BigInt("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151"),
        BigInt("1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984")), // b
    .P = AffinePoint(
        BigInt("2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846"),
        BigInt("3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784")),
    .order_of_p = BigInt("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449"),
    .Q = AffinePoint(
        BigInt("5925949609098891059266950576338613610666711648886212459641587106438449751965426700171583731791038983645032931438546120636747859633249229843586560091215523683"),
        BigInt("6700433013990012722777157970047732606286165436612292378019839442385088276801455360823284159398085431783954280984353420476715470540267517814107334555444148702"))
};
