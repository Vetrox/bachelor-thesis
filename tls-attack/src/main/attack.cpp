#include "bitstr.h"
#include "mbedtls/cipher.h"
#include <array>
#include <bits/stdint-uintn.h>
#include <iomanip>
#include <ios>
#include <iostream>
#include <string>
#include <vector>
#include <mbedtls/ssl.h>

typedef std::vector<uint8_t> barr;
constexpr auto MASTER_SECRET_LEN = 48;

barr expect_premaster ={0xdb, 0x39, 0xe0, 0xb2, 0x91, 0x1c, 0x20, 0x7d, 0xdb, 0xf5, 0x2d, 0x6a, 0xac, 0x47, 0x29, 0xdf, 0xfe, 0x41, 0x70, 0xf0, 0x32, 0xe5, 0x55, 0x0d, 0x4f, 0x73, 0x94, 0xcc, 0xc3, 0x40, 0x7f, 0xf9, 0xcc, 0x15, 0x4a, 0x43, 0xa3, 0x4e, 0xbc, 0xe1, 0x52, 0x43, 0x8f, 0x8e, 0xc8, 0x68, 0x5d, 0x46, 0x0e, 0x0f, 0x48, 0x7d, 0x3f, 0x4f, 0x18, 0x24, 0x78, 0xf9, 0x8b, 0x7e, 0x56, 0x57, 0xa0, 0xca, 0xe9, 0x92, 0xa1, 0xec, 0xde, 0xe6, 0x1b, 0xab, 0xfb, 0x98, 0x9a, 0x89, 0xf1, 0x30, 0xb6, 0x79, 0xaf, 0x15, 0x67, 0x07, 0xe6, 0x09, 0x86, 0x90, 0xc0, 0x16, 0xa6, 0xf6, 0x22, 0x6d, 0x68, 0x05, 0x39, 0xba, 0x80, 0x1e, 0x78, 0xfc, 0x86, 0xce, 0xc0, 0xe7, 0xf6, 0xb3, 0x5e, 0xdb, 0xcc, 0x96, 0xfa, 0x24, 0x2c, 0xe1, 0x4f, 0x29, 0x24, 0xfc, 0xd1, 0x9d, 0xb4, 0x92, 0xe3, 0xd0, 0x01, 0xad, 0xc6, 0x39, 0xa5, 0x30, 0x47, 0x9b, 0x00, 0x6a, 0xe0, 0xa2, 0xa6, 0xc7, 0x15, 0xd9, 0x2f, 0xd8, 0x74, 0xd3, 0xd3, 0x9c, 0xb8, 0x54, 0xb7, 0x4e, 0x6c, 0xc0, 0x1e, 0xd4, 0x50, 0x47, 0x1c, 0x47, 0x2e, 0x6c, 0xb2, 0x09, 0x8b, 0xfb, 0x23, 0x2f, 0x19, 0x33, 0xde, 0xe5, 0x0a, 0xa8, 0x68, 0xfd, 0xf9, 0x63, 0x1f, 0x9f, 0x47, 0xdc, 0x2b, 0x5c, 0x24, 0x2b, 0x9b, 0x7d, 0xdd, 0xe2, 0x59, 0x76, 0x60, 0x8a, 0x3e, 0xf4, 0x91, 0xbe, 0xa6, 0x53, 0x8f, 0xcf, 0xa3, 0xa3, 0xd3, 0x97, 0xf5, 0xdf, 0x31, 0xaa, 0xc4, 0x42, 0x51, 0x25, 0xda, 0xe7, 0x8b, 0xfa, 0xcc, 0x02, 0xed, 0x9e, 0x35, 0x04, 0xee, 0xef, 0x3b, 0x63, 0x5c, 0xa7, 0x88, 0x84, 0x84, 0xfd, 0xab, 0x22, 0x96, 0x2b, 0x6d, 0xdb, 0x87, 0xf9, 0x37, 0x0f, 0xe8, 0x18, 0x39, 0x15, 0x7d, 0x24, 0xb5, 0x59, 0x13, 0x34, 0x49, 0x56};
barr expect_master_secret={0xac, 0xbe, 0x54, 0x3f, 0x17, 0x2f, 0xcf, 0x9a, 0x8a, 0x47, 0x97, 0xdc, 0x24, 0xc4, 0xc0, 0x2e, 0x6b, 0x22, 0xeb, 0x45, 0x9d, 0x4a, 0x0f, 0x17, 0x87, 0xed, 0x54, 0x13, 0x21, 0xce, 0x11, 0x4b, 0x7f, 0xea, 0xb0, 0x20, 0x3f, 0x4a, 0x43, 0x3d, 0x7e, 0xc3, 0x70, 0x5e, 0xdd, 0x1a, 0x6f, 0x90};
barr expect_random_bytes={0x64, 0x71, 0xed, 0x63, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x1a, 0x64, 0x71, 0xed, 0x63, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b};
barr expect_keyblock={0xaa, 0x3d, 0x18, 0x0e, 0x48, 0xe8, 0xf0, 0x89, 0x9c, 0x52, 0x9f, 0x70, 0x7f, 0x82, 0x56, 0xf8, 0xc3, 0xf7, 0x1c, 0xc2, 0xcf, 0xbb, 0x4a, 0xa0, 0x8e, 0x62, 0xcd, 0x82, 0x4d, 0x22, 0xe2, 0x2e, 0xa0, 0xfc, 0xea, 0xdb, 0x6e, 0xc6, 0x01, 0xab, 0xd5, 0xcb, 0xf2, 0x1f, 0xdf, 0x32, 0x5b, 0x52, 0xf9, 0xff, 0x0f, 0x7a, 0xb7, 0x7b, 0x41, 0x11, 0x07, 0xf7, 0xc3, 0x0b, 0x76, 0x72, 0x18, 0xe8, 0x39, 0x37, 0xb9, 0x5d, 0x63, 0xf4, 0x15, 0x45, 0xb2, 0x3a, 0xe8, 0xff, 0x92, 0x41, 0x9c, 0xdc, 0x6c, 0xdd, 0x9b, 0xe1, 0xbd, 0x0d, 0xd1, 0xeb, 0x80, 0xd0, 0x26, 0xa3, 0x7a, 0xb5, 0xd8, 0x67, 0xc6, 0x35, 0x4a, 0xad, 0xee, 0x93, 0xeb, 0xd3, 0xfc, 0x32, 0x55, 0xc0, 0x80, 0x58, 0xb3, 0xea, 0x51, 0x2c, 0x3d, 0x98, 0xee, 0x82, 0x83, 0x8e, 0xdb, 0xdc, 0x57, 0x2c, 0x29, 0xe3, 0x4f, 0xa0, 0x61, 0x1c, 0x3b, 0xe6, 0x79, 0x86, 0x5e, 0x12, 0x55, 0x9a, 0x75, 0x2c, 0xad, 0x18, 0xd9, 0xbc, 0x52, 0xfe, 0x05, 0x9e, 0xd1, 0xd7, 0xff, 0x25, 0xa0, 0xfd, 0xe7, 0x77, 0x90, 0x6b, 0x6d, 0xc3, 0x58, 0x87, 0x70, 0xe9, 0x87, 0x04, 0xea, 0xa8, 0xaf, 0x2e, 0x58, 0xe6, 0x49, 0x86, 0xb6, 0x3f, 0xe8, 0x78, 0x61, 0x38, 0x3c, 0x65, 0x5a, 0xbf, 0xca, 0x13, 0xed, 0x74, 0x89, 0x99, 0x6a, 0xd0, 0x00, 0x16, 0x56, 0x13, 0x28, 0x86, 0x34, 0x02, 0x70, 0x50, 0xf2, 0x89, 0x18, 0x32, 0x82, 0xcc, 0xcb, 0x5d, 0x62, 0xff, 0xf1, 0xca, 0xdf, 0x0d, 0x95, 0xd2, 0xfe, 0xb3, 0x7e, 0x5a, 0xd5, 0x86, 0xff, 0xe9, 0x7f, 0xcc, 0x73, 0xc5, 0xc3, 0x18, 0x9b, 0xd2, 0xfc, 0x5d, 0x05, 0xd6, 0x12, 0xb0, 0x03, 0x14, 0x40, 0x44, 0x81, 0x66, 0x14, 0x81, 0x3a, 0x1b, 0x28, 0x0e, 0x5a, 0x60, 0x13, 0xc3};


void remove_leading_zero_bytes(barr& input)
{
    while (!input.empty() && input.front() == 0)
        input.erase(input.begin());
}

barr prf(barr secret, std::string label, barr seed, size_t dst_len)
{
    barr dst;
    dst.resize(dst_len);
    auto ret = mbedtls_ssl_tls_prf(MBEDTLS_SSL_TLS_PRF_SHA256,
            &secret.front(), secret.size(),
            label.c_str(),
            &seed.front(), seed.size(),
            &dst.front(), dst.size());
    if (ret != 0) {
        std::cout << "mbedtls_ssl_tls_prf returned " << ret << std::endl;
        abort();
    }
    return dst;
}

/* See https://tools.ietf.org/html/rfc5246#section-8.1 */
barr calculate_master_secret(barr const& pre_master_secret, barr const& server_hello_random, barr const& client_hello_random)
{
    barr random;
    random.insert(random.end(), server_hello_random.begin(), server_hello_random.end());
    random.insert(random.end(), client_hello_random.begin(), client_hello_random.end());
    return prf(pre_master_secret, "master secret", random, MASTER_SECRET_LEN);
}

static void print_barr(barr input)
{
    for (auto const& b : input)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
}

struct WorkingKeys {
    barr client_write_MAC_key;
    barr server_write_MAX_key;
    barr client_write_key;
    barr server_write_key;
    barr iv_enc;
    barr iv_dec;

    void print() const
    {
        std::cout << "working_keys: ";
        std::cout << "\n\tclient_write_key: ";
        print_barr(client_write_key);
        std::cout << "\n\tserver_write_key: ";
        print_barr(server_write_key);
        std::cout << "\n\tiv_enc: ";
        print_barr(iv_enc);
        std::cout << "\n\tiv_dec: ";
        print_barr(iv_dec);
        std::cout << std::endl;
    }
};

WorkingKeys generate_working_keys(barr master_secret, barr random_seed)
{
    WorkingKeys wk;
    barr keyblk = prf(master_secret,
            "key expansion",
            random_seed,
            256);
    std::cout << "key block: ";
    for (auto const& b : keyblk)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;
    std::cout << "expected key block: ";
    for (auto const& b : expect_keyblock)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;
    // keylen: 32, minlen: 16, ivlen: 12, maclen: 0

    auto keylen = 32;
    auto transform_ivlen = 12;
    auto mac_key_len = 0;
    decltype(auto) blkptr = &keyblk.front();
    auto key_enc = blkptr + mac_key_len * 2 + keylen;
    auto key_dec = blkptr + mac_key_len * 2;
    auto mac_enc = blkptr + mac_key_len;
    auto mac_dec = blkptr;

    auto iv_copy_len = /*(transform->fixed_ivlen) ?
                      transform->fixed_ivlen : */ transform_ivlen;

    wk.server_write_key.insert(wk.server_write_key.begin(), key_enc, key_enc + keylen);
    wk.client_write_key.insert(wk.client_write_key.begin(), key_dec, key_dec + keylen);
    wk.iv_dec.insert(wk.iv_dec.begin(), key_enc + keylen, key_enc + keylen + iv_copy_len);
    wk.iv_enc.insert(wk.iv_enc.begin(), key_enc + keylen + iv_copy_len, key_enc + keylen + iv_copy_len + iv_copy_len);

    /* NOTE: Macs are left out, bc maclen = 0 */
    return wk;
}

void encrypt(WorkingKeys wk) {
    barr data = { 0x41, 0x42, 0x43, 0x44 };
    mbedtls_cipher_context_t c;

    mbedtls_cipher_definitions def;
#if 0
    mbedtls_cipher_auth_encrypt_ext(
    auto ret = mbedtls_cipher_auth_encrypt_ext(wk.server_write_key,
                                                   &wk.iv_enc.front(), wk.iv_enc.size(),
                                                   add_data, add_data_len,
                                                   &data.front(), data.size(), /* src */
                                                   &data.front(), rec->buf_len - ((&data.front()) - rec->buf), /* dst */
                                                   data.size(),
                                                   transform->taglen);
#endif
}

int main()
{
    barr pre_master_secret = expect_premaster;
    barr server_hello_random;
    barr client_hello_random;
    client_hello_random.insert(client_hello_random.begin(), expect_random_bytes.begin(), expect_random_bytes.begin() + 32);
    server_hello_random.insert(server_hello_random.begin(), expect_random_bytes.begin() + 32, expect_random_bytes.end());
    std::cout << "Premaster secret: ";
    for (auto const& b : pre_master_secret)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;

    std::cout << "Server random: ";
    for (auto const& b : server_hello_random)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;
    std::cout << "Client random: ";
    for (auto const& b : client_hello_random)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;



    remove_leading_zero_bytes(pre_master_secret);
    auto master_secret = calculate_master_secret(pre_master_secret, server_hello_random, client_hello_random);

    std::cout << "Master secret: ";
    for (auto const& b : master_secret)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;
     std::cout << "Expected Master secret: ";
    for (auto const& b : expect_master_secret)
        std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(b) << " ";
    std::cout << std::endl;


    barr random_;
    random_.insert(random_.end(), client_hello_random.begin(), client_hello_random.end());
    random_.insert(random_.end(), server_hello_random.begin(), server_hello_random.end());
    auto working_keys = generate_working_keys(master_secret, random_);
    working_keys.print();
    return 0;
}
